/* ─────────────────────────── GLOBAL TIMERS ─────────────────────────── */
let timers = {};             // dynamic user‑added timers { timerId:{time,interval} }
let timerCount = 0;          // current number of user timers
const MAX_TIMERS = 15;       // limit

/* preload audio */
const beepSound  = new Audio("https://actions.google.com/sounds/v1/alarms/beep_short.ogg");
const finalSound = new Audio("https://actions.google.com/sounds/v1/alarms/alarm_clock.ogg");

/* helper: HH MM SS → seconds */
function hmsToSeconds(h, m, s) {
  return (parseInt(h,10)||0)*3600 + (parseInt(m,10)||0)*60 + (parseInt(s,10)||0);
}
/* helper: seconds → mm:ss */
function formatTime(sec) {
  const m = Math.floor(sec/60).toString().padStart(2,'0');
  const s = (sec%60).toString().padStart(2,'0');
  return `${m}:${s}`;
}

/* audio helpers */
function playBeep() {
  beepSound.volume = 1.0;
  beepSound.currentTime = 0;
  beepSound.play().catch(()=>{});
  const clone = beepSound.cloneNode();
  setTimeout(()=>clone.play().catch(()=>{}),100);
}
function playFinalSound() {
  finalSound.currentTime = 0;
  finalSound.play().catch(e=>console.warn("Final can't play:",e));
}

/* ───── 1. dynamic cooking timers (Add Timer) ───── */
function addTimer() {
  if (timerCount >= MAX_TIMERS) {
    document.getElementById("limitMsg")?.classList.remove("hidden");
    return;
  }

  timerCount++;
  const id = `timer${timerCount}`;
  timers[id] = { time:0, interval:null };

  const container = document.getElementById("timersContainer");
  const div = document.createElement("div");
  div.className = "timer";
  div.innerHTML = `
    <label>
      H:<input type="number" id="${id}H" class="time-in" min="0" value="0">
      M:<input type="number" id="${id}M" class="time-in" min="0" value="0">
      S:<input type="number" id="${id}S" class="time-in" min="0" value="0">
    </label><br/>
     <button onclick="startTimer('${id}')">Start</button>
  <button onclick="pauseTimer('${id}')">Pause</button>
  <button onclick="resetTimer('${id}')">Reset</button>
  <button onclick="addTime('${id}')">Add Time</button>
  <div id="${id}Display">00:00</div>`;

  container.appendChild(div);
}

/* addTime(id) – read the H M S inputs beside the running timer and add them */
function addTime(id, store = timers) {
  const h = document.getElementById(id + 'H')?.value || 0;
  const m = document.getElementById(id + 'M')?.value || 0;
  const s = document.getElementById(id + 'S')?.value || 0;
  const extra = hmsToSeconds(h, m, s);
  if (extra <= 0) { alert('Enter time > 0'); return; }

  /* decide which storage object to update (timers vs recipeTimers) */
  const pool = store[id] ? store : recipeTimers[id] ? recipeTimers : fixedTimers;
  if (!pool[id]) { alert('Timer not found'); return; }

  pool[id].time += extra;                             // ⬆ increase time
  const disp = document.getElementById(id + 'Display');
  if (disp) disp.textContent = formatTime(pool[id].time);
}


function startTimer(id){
  const h=document.getElementById(id+'H').value;
  const m=document.getElementById(id+'M').value;
  const s=document.getElementById(id+'S').value;
  const display=document.getElementById(id+'Display');

  if(!timers[id].interval){
    timers[id].time = hmsToSeconds(h,m,s);
    if(timers[id].time<=0){ alert("Enter time > 0"); return; }
    display.textContent = formatTime(timers[id].time);
    playBeep();
    timers[id].interval = setInterval(()=>{
      if(timers[id].time>0){
        timers[id].time--;
        if(timers[id].time<=10&&timers[id].time>0) playBeep();
        display.textContent = formatTime(timers[id].time);
      }else{
        clearInterval(timers[id].interval);
        timers[id].interval=null;
        playFinalSound();
        alert(`Timer ${id} finished!`);
      }
    },1000);
  }
}
function pauseTimer(id){
  clearInterval(timers[id]?.interval);
  timers[id].interval=null;
}
function resetTimer(id){
  pauseTimer(id);
  timers[id].time=0;
  document.getElementById(id+'Display').textContent='00:00';
  ['H','M','S'].forEach(sfx=>document.getElementById(id+sfx).value='');
}

/* ───── 2. recipe‑card timers (generated by search) ───── */
let recipeTimers={};

function startRecipeTimer(id){
  const h=document.getElementById(id+'H').value;
  const m=document.getElementById(id+'M').value;
  const s=document.getElementById(id+'S').value;
  const display=document.getElementById(id+'Display');

  if(!recipeTimers[id]) recipeTimers[id]={ time:0, interval:null };
  const t=recipeTimers[id];

  if(!t.interval){
    t.time = hmsToSeconds(h,m,s);
    if(t.time<=0){ alert("Enter time > 0"); return; }
    display.textContent = formatTime(t.time);
    playBeep();
    t.interval = setInterval(()=>{
      if(t.time>0){
        t.time--;
        display.textContent = formatTime(t.time);
        if(t.time<=10&&t.time>0) playBeep();
      }else{
        clearInterval(t.interval);
        t.interval=null;
        playFinalSound();
        alert("Timer for recipe step finished!");
      }
    },1000);
  }
}
function pauseRecipeTimer(id){
  clearInterval(recipeTimers[id]?.interval);
  recipeTimers[id].interval=null;
}
function resetRecipeTimer(id){
  pauseRecipeTimer(id);
  recipeTimers[id].time=0;
  document.getElementById(id+'Display').textContent='00:00';
  ['H','M','S'].forEach(sfx=>document.getElementById(id+sfx).value='');
}

/* ───── 3. live suggestions (unchanged) ───── */
async function showSuggestions(){
  const term=document.getElementById('recipeSearch').value.trim();
  const box=document.getElementById('suggestions');
  box.innerHTML='';
  if(term.length<2){ box.style.display='none'; return; }
  try{
    const res=await fetch(`https://www.themealdb.com/api/json/v1/1/search.php?s=${term}`);
    const data=await res.json();
    if(!data.meals){ box.style.display='none'; return; }
    box.style.display='block';
    data.meals.slice(0,5).forEach(meal=>{
      const d=document.createElement('div');
      d.textContent=meal.strMeal;
      d.onclick=()=>{ document.getElementById('recipeSearch').value=meal.strMeal;
                      box.innerHTML=''; box.style.display='none'; };
      box.appendChild(d);
    });
  }catch{ box.style.display='none'; }
}

/* ───── 4. SEARCH recipes (builds cards with H M S inputs) ───── */
async function searchRecipes(){
  const term=document.getElementById('recipeSearch').value.trim();
  const resArea=document.getElementById('resultsSection');
  const sug=document.getElementById('suggestions');
  resArea.innerHTML=''; sug.innerHTML=''; sug.style.display='none';
  if(!term) return;

  const res=await fetch(`https://www.themealdb.com/api/json/v1/1/search.php?s=${encodeURIComponent(term)}`);
  const data=await res.json();
  if(!data.meals){ resArea.innerHTML='<p>No recipes found.</p>'; return; }

  data.meals.forEach(meal=>{
    const card=document.createElement('div');
    card.className='recipe-result';
    card.innerHTML=`
      <h3>${meal.strMeal}</h3>
      <p><strong>Category:</strong> ${meal.strCategory} |
         <strong>Cuisine:</strong> ${meal.strArea}</p>
      <button onclick="loadRecipeDetails('${meal.idMeal}')">Details</button>

      <div class="embedded-timer">
        H:<input type="number" id="${meal.idMeal}H" class="time-in" min="0" value="0">
        M:<input type="number" id="${meal.idMeal}M" class="time-in" min="0" value="0">
        S:<input type="number" id="${meal.idMeal}S" class="time-in" min="0" value="0">
        <button onclick="startRecipeTimer('${meal.idMeal}')">Start</button>
        <button onclick="pauseRecipeTimer('${meal.idMeal}')">Pause</button>
        <button onclick="resetRecipeTimer('${meal.idMeal}')">Reset</button>
        <div id="${meal.idMeal}Display">00:00</div>
      </div>`;
    resArea.appendChild(card);
  });
}

/* ───── 5. fixed flip‑card timers (still seconds‐based display) ───── */
const fixedTimers={};
function startFixedTimer(id,seconds){
  if(!fixedTimers[id]) fixedTimers[id]={time:seconds,interval:null};
  const t=fixedTimers[id];
  const disp=document.getElementById(id+'Display');
  if(t.time===0) t.time=seconds;
  if(t.interval) return;
  playBeep();
  t.interval=setInterval(()=>{
    if(t.time>0){
      t.time--; disp.textContent=t.time;
      if(t.time<=10&&t.time>0) playBeep();
    }else{
      clearInterval(t.interval); t.interval=null;
      playFinalSound();
      alert(`${id.replace(/([A-Z])/g,' $1')} timer done!`);
    }
  },1000);
}

/* ───── 6. MODAL – full recipe details ───────────────────────────── */

/* 6‑A: helper to open and close the modal */
function openModal(html) {                 // inject HTML, then show
  document.getElementById('modalBody').innerHTML = html;
  document.getElementById('recipeModal').style.display = 'block';
}
document.getElementById('modalClose').onclick = () =>      // × click
  (document.getElementById('recipeModal').style.display = 'none');
window.onclick = e => {                                   // click outside
  if (e.target.id === 'recipeModal')
    document.getElementById('recipeModal').style.display = 'none';
};

/* 6‑B: build an ingredients <ul> from a MealDB meal object */
function buildIngredientList(meal) {
  const ul = document.createElement('ul');
  ul.className = 'ingredients';            // 2‑column via CSS
  for (let i = 1; i <= 20; i++) {
    const ing = meal['strIngredient' + i];
    const meas = meal['strMeasure'   + i];
    if (ing && ing.trim()) {
      const li = document.createElement('li');
      li.textContent = `${meas.trim()} ${ing.trim()}`;
      ul.appendChild(li);
    }
  }
  return ul.outerHTML;
}

/* 6‑C: fetch single recipe + open modal */
async function loadRecipeDetails(mealId) {
  try {
    const res  = await fetch(`https://www.themealdb.com/api/json/v1/1/lookup.php?i=${mealId}`);
    const meal = (await res.json()).meals[0];

   const html = `
  <h2>${meal.strMeal}</h2>
  <img src="${meal.strMealThumb}" alt="${meal.strMeal}">
  ${buildIngredientList(meal)}
  <h3>Instructions</h3>
  <p>${meal.strInstructions.replace(/\r\n/g, '<br>')}</p>
  ${meal.strYoutube ? `<p><a href="${meal.strYoutube}" target="_blank">Watch on YouTube</a></p>` : ''}
  
  <!-- TIMER SECTION INSIDE MODAL -->
  <div class="modal-timer">
    <h3>Set Timer for this Recipe</h3>
    <label>
      H:<input type="number" id="${meal.idMeal}ModalH" class="time-in" min="0" value="0" style="width:40px;">
      M:<input type="number" id="${meal.idMeal}ModalM" class="time-in" min="0" value="0" style="width:40px;">
      S:<input type="number" id="${meal.idMeal}ModalS" class="time-in" min="0" value="0" style="width:40px;">
    </label>
    <br/>
    <button onclick="startRecipeTimer('${meal.idMeal}Modal')">Start</button>
    <button onclick="pauseRecipeTimer('${meal.idMeal}Modal')">Pause</button>
    <button onclick="resetRecipeTimer('${meal.idMeal}Modal')">Reset</button>
    <div id="${meal.idMeal}ModalDisplay" style="font-size:1.5em; margin-top:0.5em;">00:00</div>
  </div>
`;

    openModal(html);
  } catch (e) {
    alert('Could not load recipe details.');
    console.error(e);
  }
}




/* 6‑D: tweak the card template inside searchRecipes()  ---------------
   (Find it above in your file and replace the link <a …> with the line below) */

/*
<a href="${meal.strSource||meal.strYoutube}" target="_blank">View full recipe</a>
            ↓   replace with   ↓
<button onclick="loadRecipeDetails('${meal.idMeal}')">Details</button>
*/

